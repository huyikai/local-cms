{"version":3,"file":"cms.js","sources":["cms.ts"],"sourcesContent":["import bodyParser from \"body-parser\";\nimport chalk from \"chalk\";\nimport { exec } from \"child_process\";\nimport express from \"express\";\nimport { fileURLToPath } from \"url\";\nimport fs from \"fs\";\nimport globby from \"globby\";\nimport net from \"net\";\nimport path from \"path\";\n\nconst app = express();\nlet port = 3000;\n\n// 设置默认目录为docs，如果命令行参数中有目录，则使用命令行参数中的目录\nlet currentDirectory = process.argv[2] || \"docs\";\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\napp.use(express.static(path.join(__dirname, \"dist\")));\napp.use(\n  `${process.cwd()}/${currentDirectory}`,\n  express.static(currentDirectory)\n);\n\napp.use(bodyParser.json());\n\nconst server = net.createServer();\n\nserver.once(\"error\", (err: NodeJS.ErrnoException) => {\n  if (err.code === \"EADDRINUSE\") {\n    console.log(`端口 ${port} 已被占用`);\n    port += 1;\n    server.listen(port);\n  }\n});\n\nserver.once(\"listening\", () => {\n  server.close();\n  app.listen(port, () => {\n    console.log(\n      `LocalCMS 管理界面正在运行在 ${chalk.blue.bold(\n        `http://localhost:${port}`\n      )}`\n    );\n  });\n});\n\nserver.listen(port);\n\n// 获取目录下所有文件及文件夹\napp.get(\"/api/directory/all\", (req, res) => {\n  const dirPath = path.join(\n    currentDirectory,\n    typeof req.query.path === \"string\" ? req.query.path : \"\"\n  );\n  const ignore =\n    typeof req.query.ignore === \"string\"\n      ? req.query.ignore.split(\",\")\n      : [\".vitepress\", \"public\", \"index.md\", \".DS_Store\"];\n  fs.readdir(dirPath, { withFileTypes: true }, (err, dirents) => {\n    if (err) {\n      res.status(500).send(\"读取目录失败:\" + dirPath);\n    } else {\n      const result = dirents\n        .filter((dirent) => !ignore.includes(dirent.name))\n        .map((dirent) => {\n          const filePath = path.join(dirPath, dirent.name);\n          if (dirent.isDirectory()) {\n            return {\n              name: dirent.name,\n              isDirectory: true,\n              isLeaf: false,\n              path: path.join(\n                typeof req.query.path === \"string\" ? req.query.path : \"\",\n                dirent.name\n              ),\n              children: getChildren(\n                filePath,\n                path.join(\n                  typeof req.query.path === \"string\" ? req.query.path : \"\",\n                  dirent.name\n                )\n              ),\n              key: path.join(\n                typeof req.query.path === \"string\" ? req.query.path : \"\",\n                dirent.name\n              ),\n            };\n          } else {\n            return {\n              name: dirent.name,\n              isDirectory: false,\n              isLeaf: true,\n              path: path.join(\n                typeof req.query.path === \"string\" ? req.query.path : \"\",\n                dirent.name\n              ),\n              key: path.join(\n                typeof req.query.path === \"string\" ? req.query.path : \"\",\n                dirent.name\n              ),\n            };\n          }\n        });\n      res.status(200).send(result);\n    }\n  });\n});\n// 递归获取子目录下的所有文件和文件夹\nfunction getChildren(dirPath: any, parentPath = \"\") {\n  const files = fs.readdirSync(dirPath);\n  const result: any = files.map((file) => {\n    const filePath = path.join(dirPath, file);\n    const stats = fs.statSync(filePath);\n    if (stats.isDirectory()) {\n      return {\n        name: file,\n        isDirectory: true,\n        isLeaf: false,\n        path: path.join(parentPath, file),\n        parentPath: parentPath,\n        children: getChildren(filePath, path.join(parentPath, file)),\n        key: path.join(parentPath, file),\n      };\n    } else {\n      return {\n        name: file,\n        isDirectory: false,\n        isLeaf: true,\n        path: path.join(parentPath, file),\n        parentPath: parentPath,\n        key: path.join(parentPath, file),\n      };\n    }\n  });\n  return result;\n}\n\n// 获取所有md文件\napp.get(\"/api/files/all\", async (req, res) => {\n  const paths = await globby([\"**.md\"], {\n    ignore: [\n      \"**/node_modules\",\n      \"**/*index*.md\",\n      \"**/*README*.md\",\n      \"**/*readme*.md\",\n      \"./packages\",\n    ], // 忽略的文件夹和文件\n  });\n  res.json(paths.sort());\n});\n\n// 读取单个文件\napp.get(\"/api/files\", (req, res) => {\n  const filePath = path.join(\n    currentDirectory,\n    decodeURIComponent(typeof req.query.path === \"string\" ? req.query.path : \"\")\n  );\n  fs.readFile(filePath, \"utf-8\", (err, data) => {\n    if (err) {\n      res.status(500).send(\"读取文件失败\");\n    } else {\n      res.status(200).send(data);\n    }\n  });\n});\n\n// 新建文件\napp.post(\"/api/files\", (req, res) => {\n  const { filename, directory } = req.body;\n  const filePath = path.join(currentDirectory, `${directory}/${filename}.md`);\n  // 检查文件是否已存在\n  if (fs.existsSync(filePath)) {\n    res.status(400).send(\"文件已存在\");\n  } else {\n    // 使用 fs 模块创建新文件\n    fs.writeFile(filePath, \"\", (err) => {\n      if (err) {\n        res.status(500).send(\"创建文件失败\");\n      } else {\n        res.status(200).send(\"文件创建成功\");\n      }\n    });\n  }\n});\n\n// 新建目录\napp.post(\"/api/directories\", (req, res) => {\n  const { directory } = req.body;\n  const dirPath = path.join(currentDirectory, directory);\n  // 检查目录是否已存在\n  if (fs.existsSync(dirPath)) {\n    res.status(400).send(\"目录已存在\");\n  } else {\n    // 使用 fs 模块创建新目录\n    fs.mkdir(dirPath, (err) => {\n      if (err) {\n        res.status(500).send(\"创建目录失败\");\n      } else {\n        res.status(200).send(\"目录创建成功\");\n      }\n    });\n  }\n});\n\n// 修改文件\napp.put(\"/api/files\", (req, res) => {\n  // 使用 fs 模块更新文件内容\n  const { content } = req.body;\n  const filePath = path.join(currentDirectory, req.body.path);\n  fs.writeFile(filePath, content, (err) => {\n    if (err) {\n      res.status(500).send(\"更新文件失败\");\n    } else {\n      res.status(200).send(\"文件更新成功\");\n    }\n  });\n});\n\n// 删除文件\napp.delete(\"/api/files\", (req, res) => {\n  const { directory } = req.body;\n  const filePath = path.join(currentDirectory, directory);\n  fs.unlink(filePath, (err) => {\n    if (err) {\n      res.status(500).send(\"删除文件失败\");\n    } else {\n      res.status(200).send(\"文件删除成功\");\n    }\n  });\n});\n\n// 删除目录\napp.delete(\"/api/directories\", (req, res) => {\n  const { directory } = req.body;\n  const dirPath = path.join(currentDirectory, directory);\n  fs.rm(dirPath, { recursive: true }, (err) => {\n    if (err) {\n      res.status(500).send(\"删除目录失败\");\n    } else {\n      res.status(200).send(\"目录删除成功\");\n    }\n  });\n});\n\n// 重命名文件\napp.put(\"/api/files/rename\", (req, res) => {\n  const { name, directory } = req.body;\n  const dir = path.dirname(directory);\n  const oldFilePath = path.join(currentDirectory, directory);\n  const newFilePath = path.join(currentDirectory, dir, `${name}.md`);\n  fs.rename(oldFilePath, newFilePath, (err) => {\n    if (err) {\n      res.status(500).send(\"重命名文件失败\");\n    } else {\n      res.status(200).send(\"文件重命名成功\");\n    }\n  });\n});\n\n// 重命名目录\napp.put(\"/api/directories/rename\", (req, res) => {\n  const { name, directory } = req.body;\n  const dir = path.dirname(directory);\n  const oldDirPath = path.join(currentDirectory, directory);\n  const newDirPath = path.join(currentDirectory, dir, `${name}`);\n  fs.rename(oldDirPath, newDirPath, (err) => {\n    if (err) {\n      if (err.code === \"ENOTEMPTY\") {\n        // 目录不为空，需要递归重命名子目录和移动文件\n        renameDir(oldDirPath, newDirPath)\n          .then(() => {\n            res.status(200).send(\"目录重命名成功\");\n          })\n          .catch(() => {\n            res.status(500).send(\"重命名目录失败\");\n          });\n      } else {\n        res.status(500).send(\"重命名目录失败\");\n      }\n    } else {\n      res.status(200).send(\"目录重命名成功\");\n    }\n  });\n});\n\n// 递归重命名目录和移动文件\nconst renameDir = async (oldDirPath: any, newDirPath: any) => {\n  const files = await fs.promises.readdir(oldDirPath);\n  await Promise.all(\n    files.map(async (file) => {\n      const oldFilePath = path.join(oldDirPath, file);\n      const newFilePath = path.join(newDirPath, file);\n      const stats = await fs.promises.stat(oldFilePath);\n      if (stats.isDirectory()) {\n        await renameDir(oldFilePath, newFilePath);\n      } else {\n        await fs.promises.rename(oldFilePath, newFilePath);\n      }\n    })\n  );\n  await fs.promises.rm(oldDirPath);\n};\n\n// 设置目录\napp.post(\"/api/set-directory\", (req, res) => {\n  currentDirectory = req.body.directory;\n  app.use(currentDirectory, express.static(currentDirectory));\n  res.status(200).send(\"目录设置成功\");\n});\n\n// 获取文件 git 版本信息\napp.get(\"/api/files/git\", (req, res) => {\n  const filePath = path.join(\n    currentDirectory,\n    decodeURIComponent(typeof req.query.path === \"string\" ? req.query.path : \"\")\n  );\n  exec(\n    `git log --pretty=format:\"%h - %an, %ar : %s\" ${filePath}`,\n    (err, stdout, _stderr) => {\n      if (err) {\n        res.status(500).send(\"获取Git版本信息失败\");\n      } else {\n        const fileData = {\n          gitLog: stdout,\n        };\n        res.status(200).send(fileData);\n      }\n    }\n  );\n});\n\n// 添加通配符路由，重定向到 Vue 应用的入口文件\napp.get(\"*\", (_req, res) => {\n  res.sendFile(path.join(__dirname, \"dist/index.html\"));\n});\n\nexport default app;\n"],"names":["app","express","port","currentDirectory","process","argv","__dirname","path","dirname","fileURLToPath","url","use","static","join","cwd","bodyParser","json","server","net","createServer","getChildren","dirPath","parentPath","fs","readdirSync","map","file","filePath","statSync","isDirectory","name","isLeaf","children","key","once","err","code","console","log","listen","close","chalk","blue","bold","get","req","res","query","ignore","split","readdir","withFileTypes","dirents","status","send","result","filter","dirent","includes","async","paths","globby","sort","decodeURIComponent","readFile","data","post","filename","directory","body","existsSync","writeFile","mkdir","put","content","delete","unlink","rm","recursive","dir","oldFilePath","newFilePath","rename","oldDirPath","newDirPath","renameDir","then","catch","files","promises","Promise","all","stat","exec","stdout","_stderr","fileData","gitLog","_req","sendFile"],"mappings":"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"}